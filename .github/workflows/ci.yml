name: CI

# POLICY: No stubs in CI for LLM functionality.
# - We DO NOT set CEDARPY_TEST_MODE here.
# - We DO set CEDARPY_TEST_LLM_READY=1 so LLM-dependent tests run against real APIs using GitHub Secrets.
# - Do NOT re-introduce broad -k filters that drop major suites; only exclude Playwright/Qt where runners lack runtime.
# See README (LLM classification on file upload) for key setup and notes.

on:
  push:
  pull_request:

permissions:
  contents: read

env:
  PYTHONUNBUFFERED: "1"

jobs:
  lint:
    name: Lint (ruff)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dev deps (ruff only)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip list --format=freeze > pip-freeze-dev.txt

      - name: Environment info
        run: |
          python -V | tee env.txt
          pip -V | tee -a env.txt
          uname -a | tee -a env.txt

      - name: Ruff (lint)
        id: ruff
        shell: bash
        run: |
          echo "::group::ruff check"
          set -o pipefail
          ruff check . | tee ruff-output.txt
          STATUS=${PIPESTATUS[0]}
          echo "::endgroup::"
          if [[ $STATUS -eq 0 ]]; then
            echo "result=pass" >> "$GITHUB_OUTPUT"
          else
            echo "result=fail" >> "$GITHUB_OUTPUT"
            exit $STATUS
          fi

      - name: Upload lint artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-artifacts
          path: |
            ruff-output.txt
            env.txt
            pip-freeze-dev.txt

      - name: Summary
        if: always()
        run: |
          {
            echo "## Lint results"
            echo ""
            echo "| Field | Value |"
            echo "|------:|:------|"
            echo "| Tool | `ruff` |"
            echo "| Result | **${{ steps.ruff.outputs.result || 'n/a' }}** |"
            echo ""
            echo "Artifacts: **lint-artifacts** (ruff-output, env, pip-freeze)"
          } >> "$GITHUB_STEP_SUMMARY"

  compile:
    name: Compile (syntax check)
    runs-on: ubuntu-latest
    needs: [lint]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip list --format=freeze > pip-freeze.txt

      - name: Compile all
        id: compile
        shell: bash
        run: |
          echo "::group::python -m compileall"
          set -o pipefail
          # Temporarily disable -e so we can capture compileall's exit code
          set +e
          python -m compileall -q . > compile-stdout.txt 2> compile-stderr.txt
          STATUS=$?
          set -e
          echo "::endgroup::"

          # Print a short, helpful summary if there were failures
          if [[ $STATUS -ne 0 ]]; then
            echo "Some files failed to byte-compile. First 200 lines of stderr:"
            sed -n '1,200p' compile-stderr.txt || true
            echo "result=fail" >> "$GITHUB_OUTPUT"
            exit $STATUS
          else
            echo "result=pass" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload compile artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compile-artifacts
          path: |
            compile-stdout.txt
            compile-stderr.txt
            pip-freeze.txt

      - name: Summary
        if: always()
        run: |
          {
            echo "## Compile results"
            echo ""
            echo "| Field | Value |"
            echo "|------:|:------|"
            echo "| Command | `python -m compileall -q .` |"
            echo "| Result | **${{ steps.compile.outputs.result || 'n/a' }}** |"
            echo ""
            echo "Artifacts: **compile-artifacts** (stdout/stderr, pip-freeze)"
          } >> "$GITHUB_STEP_SUMMARY"

  tests_backend_core:
    name: Tests — backend core (fast, no UI/WS/LLM)
    runs-on: ubuntu-latest
    needs: [compile]
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install app + dev deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip list --format=freeze > pip-freeze-all.txt

      - name: Verify pytest-cov is available
        run: |
          python -c "import pytest_cov; print('pytest-cov OK')" || { echo "pytest-cov not installed"; exit 1; }

      - name: Show pytest config
        run: |
          pytest --version | tee pytest-info.txt
          python -c "import sys,platform;print(platform.platform());print(sys.version)" | tee -a pytest-info.txt

      - name: Pytest (backend core)
        id: pytest
        env:
          PYTHONPATH: .
        shell: bash
        run: |
          mkdir -p reports coverage htmlcov
          set -o pipefail
          echo "PYTHONPATH=$PYTHONPATH" | tee run-env.txt
          # Explicit core set (fast backend-only tests)
          pytest -vv \
            --maxfail=1 \
            --durations=25 \
            --log-cli-level=INFO --log-file=pytest.log \
            --junitxml=reports/junit.xml -o junit_family=xunit2 \
            --cov=cedarpy --cov-report=xml:coverage/coverage.xml --cov-report=term-missing \
            tests/test_smoke.py \
            tests/test_html_rendering.py \
            tests/test_threads_new_json.py \
            tests/test_shell_grep.py \
            tests/test_doctor_mode.py \
            2> pytest-stderr.txt | tee pytest-stdout.txt
          STATUS=${PIPESTATUS[0]}
          if [[ $STATUS -eq 0 ]]; then
            echo "result=pass" >> "$GITHUB_OUTPUT"
          else
            echo "result=fail" >> "$GITHUB_OUTPUT"
            exit $STATUS
          fi

      - name: Upload artifacts (unit)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-unit
          path: |
            pytest-stdout.txt
            pytest-stderr.txt
            pytest.log
            run-env.txt
            pytest-info.txt
            reports/**
            coverage/**
            pip-freeze-all.txt

      - name: Publish JUnit as Check (optional)
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        continue-on-error: true
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "reports/junit.xml"
          check_name: "JUnit Test Report (unit)"
          include_passed: true
          detailed_summary: true

      - name: Summary (unit)
        if: always()
        shell: bash
        run: |
          PASSED=$(awk '/ passed/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          FAILED=$(awk '/ failed/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          SKIPPED=$(awk '/ skipped/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          DURATION=$(awk '/collected .* in [0-9.]+s/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9.]+s$/) d=$i} END{ if (d == "") { print "n/a" } else { sub(/s$/,"", d); print d } }' pytest-stdout.txt)
          HAVE_JUNIT="missing"; [[ -f reports/junit.xml ]] && HAVE_JUNIT="reports/junit.xml"
          HAVE_COV="missing";   [[ -f coverage/coverage.xml ]] && HAVE_COV="coverage/coverage.xml"
          cat <<'MD' >> "$GITHUB_STEP_SUMMARY"
          ## Test results (unit)

          | Metric  | Value |
          |-------: |:----- |
          | Result  | **${{ steps.pytest.outputs.result || 'n/a' }}** |
          MD
          printf "| Passed  | %s |\n" "${PASSED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Failed  | %s |\n" "${FAILED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Skipped | %s |\n" "${SKIPPED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Runtime | %s s |\n\n" "${DURATION:-n/a}" >> "$GITHUB_STEP_SUMMARY"
          {
            echo "- JUnit: \`$HAVE_JUNIT\` (in **test-artifacts-unit**)"
            echo "- Coverage XML: \`$HAVE_COV\` (in **test-artifacts-unit**)"
          } >> "$GITHUB_STEP_SUMMARY"

  tests_ws:
    name: Tests — websocket (non-LLM)
    runs-on: ubuntu-latest
    needs: [compile]
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install app + dev deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip list --format=freeze > pip-freeze-all.txt

      - name: Verify pytest-cov is available
        run: |
          python -c "import pytest_cov; print('pytest-cov OK')" || { echo "pytest-cov not installed"; exit 1; }

      - name: Show pytest config
        run: |
          pytest --version | tee pytest-info.txt
          python -c "import sys,platform;print(platform.platform());print(sys.version)" | tee -a pytest-info.txt

      - name: Pytest (ws)
        id: pytest
        env:
          PYTHONPATH: .
        shell: bash
        run: |
          mkdir -p reports coverage htmlcov
          set -o pipefail
          echo "PYTHONPATH=$PYTHONPATH" | tee run-env.txt
          pytest -vv \
            --maxfail=1 \
            --durations=25 \
            --log-cli-level=INFO --log-file=pytest.log \
            --junitxml=reports/junit.xml -o junit_family=xunit2 \
            --cov=cedarpy --cov-report=xml:coverage/coverage.xml --cov-report=term-missing \
            tests/test_websockets.py \
            2> pytest-stderr.txt | tee pytest-stdout.txt
          STATUS=${PIPESTATUS[0]}
          if [[ $STATUS -eq 0 ]]; then
            echo "result=pass" >> "$GITHUB_OUTPUT"
          else
            echo "result=fail" >> "$GITHUB_OUTPUT"
            exit $STATUS
          fi

      - name: Upload artifacts (ws)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-ws
          path: |
            pytest-stdout.txt
            pytest-stderr.txt
            pytest.log
            run-env.txt
            pytest-info.txt
            reports/**
            coverage/**
            pip-freeze-all.txt

      - name: Publish JUnit as Check (optional)
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        continue-on-error: true
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "reports/junit.xml"
          check_name: "JUnit Test Report (ws)"
          include_passed: true
          detailed_summary: true

      - name: Summary (ws)
        if: always()
        shell: bash
        run: |
          PASSED=$(awk '/ passed/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          FAILED=$(awk '/ failed/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          SKIPPED=$(awk '/ skipped/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          DURATION=$(awk '/collected .* in [0-9.]+s/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9.]+s$/) d=$i} END{ if (d == "") { print "n/a" } else { sub(/s$/,"", d); print d } }' pytest-stdout.txt)
          HAVE_JUNIT="missing"; [[ -f reports/junit.xml ]] && HAVE_JUNIT="reports/junit.xml"
          HAVE_COV="missing";   [[ -f coverage/coverage.xml ]] && HAVE_COV="coverage/coverage.xml"
          cat <<'MD' >> "$GITHUB_STEP_SUMMARY"
          ## Test results (ws)

          | Metric  | Value |
          |-------: |:----- |
          | Result  | **${{ steps.pytest.outputs.result || 'n/a' }}** |
          MD
          printf "| Passed  | %s |\n" "${PASSED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Failed  | %s |\n" "${FAILED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Skipped | %s |\n" "${SKIPPED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Runtime | %s s |\n\n" "${DURATION:-n/a}" >> "$GITHUB_STEP_SUMMARY"
          {
            echo "- JUnit: \`$HAVE_JUNIT\` (in **test-artifacts-ws**)"
            echo "- Coverage XML: \`$HAVE_COV\` (in **test-artifacts-ws**)"
          } >> "$GITHUB_STEP_SUMMARY"

  tests_llm_backend:
    name: Tests — LLM backend (real API)
    runs-on: ubuntu-latest
    needs: [compile]
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install app + dev deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip list --format=freeze > pip-freeze-all.txt
      - name: Show pytest config
        run: |
          pytest --version | tee pytest-info.txt
          python -c "import sys,platform;print(platform.platform());print(sys.version)" | tee -a pytest-info.txt
      - name: Pytest (LLM backend)
        id: pytest
        env:
          PYTHONPATH: .
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CEDARPY_OPENAI_API_KEY: ${{ secrets.CEDARPY_OPENAI_API_KEY }}
          CEDARPY_TEST_LLM_READY: "1"
          CEDARPY_TEST_MODE: "0"  # Force real LLM (no stubs). See README: "CI test mode (deterministic LLM stubs)".
        shell: bash
        run: |
          mkdir -p reports coverage htmlcov
          set -o pipefail
          echo "PYTHONPATH=$PYTHONPATH" | tee run-env.txt
          echo "OPENAI_API_KEY=${OPENAI_API_KEY:+***set***}" | tee -a run-env.txt
          pytest -vv \
            --maxfail=1 \
            --durations=25 \
            --log-cli-level=INFO --log-file=pytest.log \
            --junitxml=reports/junit.xml -o junit_family=xunit2 \
            --cov=cedarpy --cov-report=xml:coverage/coverage.xml --cov-report=term-missing \
            tests/test_file_llm.py tests/test_ws_chat_orchestrator.py \
            2> pytest-stderr.txt | tee pytest-stdout.txt
      - name: Upload artifacts (llm)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-llm
          path: |
            pytest-stdout.txt
            pytest-stderr.txt
            pytest.log
            run-env.txt
            pytest-info.txt
            reports/**
            coverage/**
            pip-freeze-all.txt
      - name: Publish JUnit as Check (optional)
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        continue-on-error: true
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "reports/junit.xml"
          check_name: "JUnit Test Report (LLM)"
          include_passed: true
          detailed_summary: true
      - name: Summary (llm)
        if: always()
        shell: bash
        run: |
          PASSED=$(awk '/ passed/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          FAILED=$(awk '/ failed/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          SKIPPED=$(awk '/ skipped/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          DURATION=$(awk '/collected .* in [0-9.]+s/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9.]+s$/) d=$i} END{ if (d == "") { print "n/a" } else { sub(/s$/,"", d); print d } }' pytest-stdout.txt)
          HAVE_JUNIT="missing"; [[ -f reports/junit.xml ]] && HAVE_JUNIT="reports/junit.xml"
          HAVE_COV="missing";   [[ -f coverage/coverage.xml ]] && HAVE_COV="coverage/coverage.xml"
          cat <<'MD' >> "$GITHUB_STEP_SUMMARY"
          ## Test results (LLM backend)

          | Metric  | Value |
          |-------: |:----- |
          | Result  | **${{ steps.pytest.outputs.result || 'n/a' }}** |
          MD
          printf "| Passed  | %s |\n" "${PASSED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Failed  | %s |\n" "${FAILED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Skipped | %s |\n" "${SKIPPED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Runtime | %s s |\n\n" "${DURATION:-n/a}" >> "$GITHUB_STEP_SUMMARY"
          {
            echo "- JUnit: \`$HAVE_JUNIT\` (in **test-artifacts-llm**)"
            echo "- Coverage XML: \`$HAVE_COV\` (in **test-artifacts-llm**)"
          } >> "$GITHUB_STEP_SUMMARY"

  tests_playwright:
    name: Tests — Playwright (browser UI)
    runs-on: ubuntu-latest
    needs: [compile]
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install deps + browsers
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          python -m pip install playwright
          python -m playwright install --with-deps chromium
          pip list --format=freeze > pip-freeze-all.txt
      - name: Show pytest config
        run: |
          pytest --version | tee pytest-info.txt
          python -c "import sys,platform;print(platform.platform());print(sys.version)" | tee -a pytest-info.txt
      - name: Pytest (Playwright)
        id: pytest
        env:
          PYTHONPATH: .
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CEDARPY_OPENAI_API_KEY: ${{ secrets.CEDARPY_OPENAI_API_KEY }}
          CEDARPY_TEST_LLM_READY: "1"  # real LLM in CI; no stubs
          CEDARPY_TEST_MODE: "0"       # Force real LLM (no stubs). See README: "CI test mode (deterministic LLM stubs)".
        shell: bash
        run: |
          mkdir -p reports coverage htmlcov
          set -o pipefail
          echo "PYTHONPATH=$PYTHONPATH" | tee run-env.txt
          echo "OPENAI_API_KEY=${OPENAI_API_KEY:+***set***}" | tee -a run-env.txt
          pytest -vv \
            --maxfail=1 \
            --durations=25 \
            --log-cli-level=INFO --log-file=pytest.log \
            --junitxml=reports/junit.xml -o junit_family=xunit2 \
            --cov=cedarpy --cov-report=xml:coverage/coverage.xml --cov-report=term-missing \
            tests/test_playwright_*.py \
            2> pytest-stderr.txt | tee pytest-stdout.txt
      - name: Upload artifacts (playwright)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-playwright-linux
          path: |
            pytest-stdout.txt
            pytest-stderr.txt
            pytest.log
            run-env.txt
            pytest-info.txt
            reports/**
            coverage/**
            pip-freeze-all.txt
      - name: Publish JUnit as Check (optional)
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        continue-on-error: true
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "reports/junit.xml"
          check_name: "JUnit Test Report (playwright)"
          include_passed: true
          detailed_summary: true
      - name: Summary (playwright)
        if: always()
        shell: bash
        run: |
          PASSED=$(awk '/ passed/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          FAILED=$(awk '/ failed/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          SKIPPED=$(awk '/ skipped/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
          DURATION=$(awk '/collected .* in [0-9.]+s/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9.]+s$/) d=$i} END{ if (d == "") { print "n/a" } else { sub(/s$/,"", d); print d } }' pytest-stdout.txt)
          HAVE_JUNIT="missing"; [[ -f reports/junit.xml ]] && HAVE_JUNIT="reports/junit.xml"
          HAVE_COV="missing";   [[ -f coverage/coverage.xml ]] && HAVE_COV="coverage/coverage.xml"
          cat <<'MD' >> "$GITHUB_STEP_SUMMARY"
          ## Test results (playwright)

          | Metric  | Value |
          |-------: |:----- |
          | Result  | **${{ steps.pytest.outputs.result || 'n/a' }}** |
          MD
          printf "| Passed  | %s |\n" "${PASSED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Failed  | %s |\n" "${FAILED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Skipped | %s |\n" "${SKIPPED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Runtime | %s s |\n\n" "${DURATION:-n/a}" >> "$GITHUB_STEP_SUMMARY"
          {
            echo "- JUnit: \`$HAVE_JUNIT\` (in **test-artifacts-playwright**)"
            echo "- Coverage XML: \`$HAVE_COV\` (in **test-artifacts-playwright**)"
          } >> "$GITHUB_STEP_SUMMARY"

  tests_qt_macos:
    name: Tests — Embedded Qt (macOS headless)
    runs-on: macos-latest
    needs: [compile]
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-dev.txt
      - name: Run embedded Qt test
        env:
          PYTHONPATH: .
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CEDARPY_OPENAI_API_KEY: ${{ secrets.CEDARPY_OPENAI_API_KEY }}
          CEDARPY_TEST_LLM_READY: "1"
          CEDARPY_QT_HEADLESS: "1"
          CEDARPY_OPEN_BROWSER: "0"
          QTWEBENGINE_CHROMIUM_FLAGS: "--no-sandbox --disable-gpu"
          QTWEBENGINE_DISABLE_SANDBOX: "1"
        run: |
          pytest -vv tests/test_embedded_qt_ui.py -o junit_family=xunit2 --junitxml=reports/junit-qt.xml --maxfail=1 --log-cli-level=INFO
      - name: Upload artifacts (qt)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-qt
          path: |
            reports/**
            ~/Library/Logs/CedarPy/cedarqt_*.log
            ~/Library/Logs/CedarPy/uvicorn_from_qt.log

  build_dmg:
    name: Build DMG (macOS)
    runs-on: macos-latest
    needs: [tests_backend_core, tests_ws, tests_llm_backend, tests_playwright, tests_qt_macos]
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Build DMG (Qt)
        env:
          CEDARPY_SKIP_CI_CHECK: "1"  # we already gated via needs
          PIP_BREAK_SYSTEM_PACKAGES: "1"
        run: |
          bash packaging/build_qt_dmg.sh
      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: CedarPy.dmg
          path: packaging/dist-qt/CedarPy-qt.dmg

  tests_qt_dmg:
    name: Tests — Packaged Qt DMG (macOS)
    runs-on: macos-latest
    needs: [build_dmg]
    timeout-minutes: 30
    steps:
      - name: Download DMG artifact
        uses: actions/download-artifact@v4
        with:
          name: CedarPy.dmg
          path: dist
      - name: Run packaged app headless and verify HTTP
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CEDARPY_OPENAI_API_KEY: ${{ secrets.CEDARPY_OPENAI_API_KEY }}
          CEDARPY_TEST_LLM_READY: "1"
          CEDARPY_QT_HEADLESS: "1"
          CEDARPY_OPEN_BROWSER: "0"
          CEDARPY_ALLOW_MULTI: "1"
        shell: bash
        run: |
          set -euo pipefail
          DMG=$(ls dist/*.dmg | head -n1)
          mkdir -p mnt
          hdiutil attach "$DMG" -nobrowse -mountpoint mnt
          # Find the .app bundle at the top of the mounted volume
          APP=$(ls -d mnt/*.app 2>/dev/null | head -n1)
          if [[ -z "$APP" ]]; then
            echo "No .app found in mounted DMG. Contents of mnt:"
            ls -la mnt || true
            # Show mounted images to help debug
            hdiutil info | sed -n '1,200p' || true
            exit 1
          fi
          echo "Mounted app: $APP"
          PORT=$(python -c 'import socket; s=socket.socket(); s.bind(("127.0.0.1",0)); print(s.getsockname()[1]); s.close()')
          export CEDARPY_HOST=127.0.0.1
          export CEDARPY_PORT=$PORT
          BIN=$(ls "$APP/Contents/MacOS" | head -n1)
          echo "Launching $APP/Contents/MacOS/$BIN on port $PORT"
          "$APP/Contents/MacOS/$BIN" > app.log 2>&1 & echo $! > app.pid
          # Wait for readiness
          deadline=$((SECONDS+60))
          ok=0
          while [ $SECONDS -lt $deadline ]; do
            if curl -fsS "http://127.0.0.1:$PORT/" >/dev/null 2>&1; then
              ok=1; break
            fi
            sleep 1
          done
          if [ $ok -ne 1 ]; then
            echo "Server did not start. Log:"; tail -n 200 app.log || true
            exit 1
          fi
          echo "Packaged app responded at http://127.0.0.1:$PORT/"
          # Cleanup
          kill "$(cat app.pid)" 2>/dev/null || true
          sleep 1
          hdiutil detach mnt || true

      - name: Upload packaged app logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qt-dmg-run-logs
          path: |
            app.log

      - name: Summary (DMG)
        if: always()
        run: |
          SZ=$(du -h packaging/dist-qt/CedarPy-qt.dmg 2>/dev/null | awk '{print $1}')
          cat <<'MD' >> "$GITHUB_STEP_SUMMARY"
          ## DMG build

          | Field | Value |
          |------:|:------|
          | Result | ${{ job.status }} |
          MD
          printf "| Size | %s |\n" "${SZ:-n/a}" >> "$GITHUB_STEP_SUMMARY"

      - name: Checkout (for tests)
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install app + dev deps (incl. Playwright)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          python -m pip install playwright
          python -m playwright install --with-deps chromium
          pip list --format=freeze > pip-freeze-all.txt

      - name: Verify pytest-cov is available
        run: |
          python -c "import pytest_cov; print('pytest-cov OK')" || { echo "pytest-cov not installed"; exit 1; }

      - name: Show pytest config
        run: |
          pytest --version | tee pytest-info.txt
          python -c "import sys,platform;print(platform.platform());print(sys.version)" | tee -a pytest-info.txt

      - name: Pytest (Playwright)
        id: pytest
        env:
          PYTHONPATH: .
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CEDARPY_OPENAI_API_KEY: ${{ secrets.CEDARPY_OPENAI_API_KEY }}
          CEDARPY_TEST_LLM_READY: "1"  # real LLM in CI; no stubs
        shell: bash
        run: |
          mkdir -p reports coverage htmlcov
          set -o pipefail
          echo "PYTHONPATH=$PYTHONPATH" | tee run-env.txt
          echo "OPENAI_API_KEY=${OPENAI_API_KEY:+***set***}" | tee -a run-env.txt
          pytest -vv \
            --maxfail=1 \
            --durations=25 \
            --log-cli-level=INFO --log-file=pytest.log \
            --junitxml=reports/junit.xml -o junit_family=xunit2 \
            --cov=cedarpy --cov-report=xml:coverage/coverage.xml --cov-report=term-missing \
            tests/test_playwright_*.py \
            2> pytest-stderr.txt | tee pytest-stdout.txt
          STATUS=${PIPESTATUS[0]}
          if [[ $STATUS -eq 0 ]]; then
            echo "result=pass" >> "$GITHUB_OUTPUT"
          else
            echo "result=fail" >> "$GITHUB_OUTPUT"
            exit $STATUS
          fi

      - name: Upload artifacts (playwright)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-playwright-macos
          path: |
            pytest-stdout.txt
            pytest-stderr.txt
            pytest.log
            run-env.txt
            pytest-info.txt
            reports/**
            coverage/**
            pip-freeze-all.txt

      - name: Publish JUnit as Check (optional)
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        continue-on-error: true
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "reports/junit.xml"
          check_name: "JUnit Test Report (playwright)"
          include_passed: true
          detailed_summary: true

      - name: Summary (playwright)
        if: always()
        shell: bash
        run: |
          if [[ -f pytest-stdout.txt ]]; then
            PASSED=$(awk '/ passed/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
            FAILED=$(awk '/ failed/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
            SKIPPED=$(awk '/ skipped/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9]+$/) c+=$i} END{print c+0}' pytest-stdout.txt)
            DURATION=$(awk '/collected .* in [0-9.]+s/ {for(i=1;i<=NF;i++) if ($i ~ /^[0-9.]+s$/) d=$i} END{ if (d == "") { print "n/a" } else { sub(/s$/,"", d); print d } }' pytest-stdout.txt)
          else
            PASSED=0; FAILED=0; SKIPPED=0; DURATION="n/a"
          fi
          HAVE_JUNIT="missing"; [[ -f reports/junit.xml ]] && HAVE_JUNIT="reports/junit.xml"
          HAVE_COV="missing";   [[ -f coverage/coverage.xml ]] && HAVE_COV="coverage/coverage.xml"
          cat <<'MD' >> "$GITHUB_STEP_SUMMARY"
          ## Test results (playwright)

          | Metric  | Value |
          |-------: |:----- |
          | Result  | **${{ steps.pytest.outputs.result || 'n/a' }}** |
          MD
          printf "| Passed  | %s |\n" "${PASSED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Failed  | %s |\n" "${FAILED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Skipped | %s |\n" "${SKIPPED:-0}" >> "$GITHUB_STEP_SUMMARY"
          printf "| Runtime | %s s |\n\n" "${DURATION:-n/a}" >> "$GITHUB_STEP_SUMMARY"
          {
            echo "- JUnit: \`$HAVE_JUNIT\` (in **test-artifacts-playwright**)"
            echo "- Coverage XML: \`$HAVE_COV\` (in **test-artifacts-playwright**)"
          } >> "$GITHUB_STEP_SUMMARY"
