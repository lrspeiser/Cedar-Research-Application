name: CI

on:
  push:
  pull_request:

permissions:
  contents: read

env:
  PYTHONUNBUFFERED: "1"

jobs:
  lint:
    name: Lint (ruff)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dev deps (ruff only)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip list --format=freeze > pip-freeze-dev.txt

      - name: Environment info
        run: |
          python -V | tee env.txt
          pip -V | tee -a env.txt
          uname -a | tee -a env.txt

      - name: Ruff (lint)
        id: ruff
        shell: bash
        run: |
          echo "::group::ruff check"
          set -o pipefail
          ruff check . | tee ruff-output.txt
          STATUS=${PIPESTATUS[0]}
          echo "::endgroup::"
          if [[ $STATUS -eq 0 ]]; then
            echo "result=pass" >> "$GITHUB_OUTPUT"
          else
            echo "result=fail" >> "$GITHUB_OUTPUT"
            exit $STATUS
          fi

      - name: Upload lint artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-artifacts
          path: |
            ruff-output.txt
            env.txt
            pip-freeze-dev.txt

      - name: Summary
        if: always()
        run: |
          {
            echo "## Lint results"
            echo ""
            echo "| Field | Value |"
            echo "|------:|:------|"
            echo "| Tool | `ruff` |"
            echo "| Result | **${{ steps.ruff.outputs.result || 'n/a' }}** |"
            echo ""
            echo "Artifacts: **lint-artifacts** (ruff-output, env, pip-freeze)"
          } >> "$GITHUB_STEP_SUMMARY"

  compile:
    name: Compile (syntax check)
    runs-on: ubuntu-latest
    needs: [lint]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip list --format=freeze > pip-freeze.txt

      - name: Compile all
        id: compile
        shell: bash
        run: |
          echo "::group::python -m compileall"
          set -o pipefail
          python -m compileall -q . > compile-stdout.txt 2> compile-stderr.txt || STATUS=$?
          echo "::endgroup::"
          if [[ -z "$STATUS" ]]; then
            echo "result=pass" >> "$GITHUB_OUTPUT"
          else
            echo "result=fail" >> "$GITHUB_OUTPUT"
            exit $STATUS
          fi

      - name: Upload compile artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compile-artifacts
          path: |
            compile-stdout.txt
            compile-stderr.txt
            pip-freeze.txt

      - name: Summary
        if: always()
        run: |
          {
            echo "## Compile results"
            echo ""
            echo "| Field | Value |"
            echo "|------:|:------|"
            echo "| Command | `python -m compileall -q .` |"
            echo "| Result | **${{ steps.compile.outputs.result || 'n/a' }}** |"
            echo ""
            echo "Artifacts: **compile-artifacts** (stdout/stderr, pip-freeze)"
          } >> "$GITHUB_STEP_SUMMARY"

  tests:
    name: Tests (unit/integration)
    runs-on: ubuntu-latest
    needs: [compile]
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install app + dev deps (incl. Playwright)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          python -m pip install playwright
          python -m playwright install --with-deps chromium
          pip list --format=freeze > pip-freeze-all.txt

      - name: Show pytest config
        run: |
          pytest --version | tee pytest-info.txt
          python -c "import sys,platform;print(platform.platform());print(sys.version)" | tee -a pytest-info.txt

      - name: Pytest (JUnit + coverage + timings)
        id: pytest
        env:
          PYTHONPATH: .
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CEDARPY_OPENAI_API_KEY: ${{ secrets.CEDARPY_OPENAI_API_KEY }}
        shell: bash
        run: |
          mkdir -p reports coverage htmlcov
          set -o pipefail
          # Write inputs so they're visible later
          echo "PYTHONPATH=$PYTHONPATH" | tee run-env.txt
          echo "OPENAI_API_KEY=${OPENAI_API_KEY:+***set***}" | tee -a run-env.txt
          # Run tests
          pytest -vv \
            --maxfail=1 \
            --durations=25 \
            --junitxml=reports/junit.xml -o junit_family=xunit2 \
            --cov=cedarpy --cov-report=xml:coverage/coverage.xml --cov-report=term-missing \
            2> pytest-stderr.txt | tee pytest-stdout.txt
          STATUS=${PIPESTATUS[0]}
          # Basic result flag for summaries
          if [[ $STATUS -eq 0 ]]; then
            echo "result=pass" >> "$GITHUB_OUTPUT"
          else
            echo "result=fail" >> "$GITHUB_OUTPUT"
            exit $STATUS
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            pytest-stdout.txt
            pytest-stderr.txt
            run-env.txt
            pytest-info.txt
            reports/**
            coverage/**

      - name: Publish JUnit as Check (optional)
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "reports/junit.xml"
          check_name: "JUnit Test Report"
          include_passed: true
          detailed_summary: true

      - name: Summary
        if: always()
        run: |
          PASSED=$(grep -Eo '([0-9]+) passed' pytest-stdout.txt | awk '{sum+=$1} END{print sum+0}')
          FAILED=$(grep -Eo '([0-9]+) failed' pytest-stdout.txt | awk '{sum+=$1} END{print sum+0}')
          SKIPPED=$(grep -Eo '([0-9]+) skipped' pytest-stdout.txt | awk '{sum+=$1} END{print sum+0}')
          DURATION=$(grep -Eo 'collected .* in [0-9.]+s' pytest-stdout.txt | sed -E 's/.* in ([0-9.]+)s/\1/')
          {
            echo "## Test results"
            echo ""
            echo "| Metric  | Value |"
            echo "|-------: |:----- |"
            echo "| Result  | **${{ steps.pytest.outputs.result || 'n/a' }}** |"
            echo "| Passed  | ${PASSED:-0} |"
            echo "| Failed  | ${FAILED:-0} |"
            echo "| Skipped | ${SKIPPED:-0} |"
            echo "| Runtime | ${DURATION:-n/a} s |"
            echo ""
            echo "- JUnit: `reports/junit.xml` (in **test-artifacts**)"
            echo "- Coverage XML: `coverage/coverage.xml` (in **test-artifacts**)"
          } >> "$GITHUB_STEP_SUMMARY"
