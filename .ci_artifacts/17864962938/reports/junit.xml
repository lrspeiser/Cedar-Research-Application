<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="1" tests="9" time="327.896" timestamp="2025-09-19T17:11:05.100852+00:00" hostname="runnervmf4ws1"><testcase classname="tests.test_doctor_mode" name="test_doctor_mode_runs" time="20.050" /><testcase classname="tests.test_embedded_qt_ui" name="test_embedded_qt_upload_flow" time="0.000"><skipped type="pytest.skip" message="Enable after CI installs Qt runtime">/home/runner/work/cedarpy/cedarpy/tests/test_embedded_qt_ui.py:21: Enable after CI installs Qt runtime</skipped></testcase><testcase classname="tests.test_file_llm" name="test_upload_emits_processing_and_updates_metadata_json" time="11.565" /><testcase classname="tests.test_file_llm" name="test_upload_sets_ai_fields_via_llm" time="217.674" /><testcase classname="tests.test_file_llm" name="test_thread_chat_llm_generates_assistant_message" time="10.947" /><testcase classname="tests.test_html_rendering" name="test_projects_list_html_formats_datetime" time="0.001" /><testcase classname="tests.test_playwright_merge" name="test_merge_dashboard_shows_unique_and_merges[chromium-/]" time="16.178" /><testcase classname="tests.test_playwright_shell" name="test_shell_ui_open_world[chromium-/shell]" time="1.039" /><testcase classname="tests.test_playwright_upload" name="test_project_upload_flow[chromium-/]" time="46.049"><failure message="AssertionError: Both UI and backend failed. UI error: Locator.click: Timeout 30000ms exceeded.&#10;Call log:&#10;  - waiting for get_by_test_id(&quot;upload-submit&quot;)&#10;    - locator resolved to &lt;button type=&quot;submit&quot; data-testid=&quot;upload-submit&quot;&gt;Upload&lt;/button&gt;&#10;  - attempting click action&#10;    - waiting for element to be visible, enabled and stable&#10;    - element is visible, enabled and stable&#10;    - scrolling into view if needed&#10;    - done scrolling&#10;    - performing click action&#10;    - click action done&#10;    - waiting for scheduled navigations to finish&#10;; Backend error: timed out">page = &lt;Page url='http://127.0.0.1:58549/project/2?branch_id=1'&gt;, path = '/'

    @pytest.mark.parametrize("path", ["/"])
    def test_project_upload_flow(page: Page, path: str):
        port = _find_free_port()
        server, thread = _start_server(port)
        try:
            url = f"http://127.0.0.1:{port}{path}"
            page.goto(url)
            # Create a project: fill title and click the submit button (label may be "Create" or "Create Project")
            # Use a unique project title to avoid UNIQUE constraint failures across runs
            unique_title = f"UI Upload Test {int(time.time()*1000000)}"
            page.fill("input[name=title]", unique_title)
            if page.get_by_text("Create Project").count() &gt; 0:
                page.get_by_text("Create Project").click()
            else:
                page.locator("form[action='/projects/create'] button[type=submit]").click()
            # Wait for project page
            page.wait_for_url(f"**/project/*")
            # Upload a file via the form hooks
            upload_input = page.get_by_test_id("upload-input")
            # Create a temporary file
            tmp_path = Path.cwd() / ".pw_tmp_upload.txt"
            tmp_path.write_text("hello,playwright\n", encoding="utf-8")
            upload_input.set_input_files(str(tmp_path))
            # Verify the submit button is visible and enabled before clicking
            submit_btn = page.get_by_test_id("upload-submit")
            try:
                from playwright.sync_api import expect
                expect(submit_btn).to_be_visible()
                expect(submit_btn).to_be_enabled()
            except Exception:
                # Fallback: attribute check if expect is unavailable
                assert submit_btn.is_visible(), "Upload submit not visible"
                assert submit_btn.is_enabled(), "Upload submit not enabled"
&gt;           submit_btn.click()

tests/test_playwright_upload.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/playwright/sync_api/_generated.py:15543: in click
    self._sync(
/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/playwright/_impl/_locator.py:160: in click
    return await self._frame.click(self._selector, strict=True, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/playwright/_impl/_frame.py:549: in click
    await self._channel.send("click", self._timeout, locals_to_params(locals()))
/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/playwright/_impl/_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;playwright._impl._connection.Connection object at 0x7fcf99d9e8d0&gt;
cb = &lt;function Channel.send.&lt;locals&gt;.&lt;lambda&gt; at 0x7fcf9957f100&gt;
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -&gt; Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
&gt;           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.
E           Call log:
E             - waiting for get_by_test_id("upload-submit")
E               - locator resolved to &lt;button type="submit" data-testid="upload-submit"&gt;Upload&lt;/button&gt;
E             - attempting click action
E               - waiting for element to be visible, enabled and stable
E               - element is visible, enabled and stable
E               - scrolling into view if needed
E               - done scrolling
E               - performing click action
E               - click action done
E               - waiting for scheduled navigations to finish

/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/playwright/_impl/_connection.py:558: TimeoutError

The above exception was the direct cause of the following exception:

page = &lt;Page url='http://127.0.0.1:58549/project/2?branch_id=1'&gt;, path = '/'

    @pytest.mark.parametrize("path", ["/"])
    def test_project_upload_flow(page: Page, path: str):
        port = _find_free_port()
        server, thread = _start_server(port)
        try:
            url = f"http://127.0.0.1:{port}{path}"
            page.goto(url)
            # Create a project: fill title and click the submit button (label may be "Create" or "Create Project")
            # Use a unique project title to avoid UNIQUE constraint failures across runs
            unique_title = f"UI Upload Test {int(time.time()*1000000)}"
            page.fill("input[name=title]", unique_title)
            if page.get_by_text("Create Project").count() &gt; 0:
                page.get_by_text("Create Project").click()
            else:
                page.locator("form[action='/projects/create'] button[type=submit]").click()
            # Wait for project page
            page.wait_for_url(f"**/project/*")
            # Upload a file via the form hooks
            upload_input = page.get_by_test_id("upload-input")
            # Create a temporary file
            tmp_path = Path.cwd() / ".pw_tmp_upload.txt"
            tmp_path.write_text("hello,playwright\n", encoding="utf-8")
            upload_input.set_input_files(str(tmp_path))
            # Verify the submit button is visible and enabled before clicking
            submit_btn = page.get_by_test_id("upload-submit")
            try:
                from playwright.sync_api import expect
                expect(submit_btn).to_be_visible()
                expect(submit_btn).to_be_enabled()
            except Exception:
                # Fallback: attribute check if expect is unavailable
                assert submit_btn.is_visible(), "Upload submit not visible"
                assert submit_btn.is_enabled(), "Upload submit not enabled"
            submit_btn.click()
            # Should navigate back to project with msg=File+uploaded
            page.wait_for_url("**/project/*?**msg=File+uploaded**")
            # Verify file appears in Files list
            # The Files card heading should be present (avoid strict mode violation)
            assert page.get_by_role("heading", name="Files").is_visible()
            assert page.get_by_text(".pw_tmp_upload.txt").first.is_visible()
            # If LLM is configured and reachable, verify that AI fields are populated
            if os.environ.get("CEDARPY_TEST_LLM_READY") == "1":
                try:
                    html = page.content()
                    assert "AI Title:" in html, "AI Title label missing in UI"
                    assert "AI Title:&lt;/strong&gt; (none)" not in html, "LLM did not populate AI Title"
                    # Optionally ensure the processing thread shows a success entry
                    # (display_title is "File analyzed" when classification succeeds)
                    if page.get_by_text("File analyzed").count() == 0:
                        assert "File analyzed" in html, "Missing 'File analyzed' thread entry"
                except Exception:
                    # Fall back to a visible check for the label in case content() changes
                    assert page.get_by_text("AI Title:").first.is_visible(), "AI Title label not visible"
        except Exception as ui_err:
            # Backend fallback: run the same flow via HTTP to distinguish FE vs BE failure
            backend_ok = False
            backend_err = None
            try:
                base = f"http://127.0.0.1:{port}"
                with httpx.Client(base_url=base, follow_redirects=False, timeout=10) as hc:
                    # Create a unique project via backend
                    b_title = f"UI Upload Test (backend) {int(time.time()*1000000)}"
                    r = hc.post("/projects/create", data={"title": b_title})
                    assert r.status_code in (200, 303)
                    # Resolve project page
                    loc = r.headers.get("location")
                    if not loc:
                        # Fallback: fetch home and find a project link
                        home = hc.get("/").text
                        import re as _re
                        m = _re.search(r"/project/(\\d+)", home)
                        assert m, "backend: could not find project link"
                        pid = int(m.group(1))
                        proj_url = f"/project/{pid}?branch_id=1"
                    else:
                        proj_url = loc
                    # Extract branch_id for upload
                    q = parse_qs(urlparse(proj_url).query)
                    branch_id = int((q.get("branch_id") or ["1"])[0])
                    # Upload a file
                    with (Path.cwd() / ".pw_tmp_upload_backend.txt").open("wb") as f:
                        f.write(b"hello,backend\n")
                    with (Path.cwd() / ".pw_tmp_upload_backend.txt").open("rb") as f:
                        files = {"file": (".pw_tmp_upload_backend.txt", f, "text/plain")}
                        ur = hc.post(f"/project/{int(urlparse(proj_url).path.split('/')[-1])}/files/upload?branch_id={branch_id}", files=files)
                        assert ur.status_code in (200, 303)
                    backend_ok = True
            except Exception as be:
                backend_err = be
            # Fail the test but annotate whether backend succeeded
            if backend_ok:
                raise AssertionError(f"Playwright UI failed, but backend succeeded. UI error: {ui_err}") from ui_err
&gt;           raise AssertionError(f"Both UI and backend failed. UI error: {ui_err}; Backend error: {backend_err}") from ui_err
E           AssertionError: Both UI and backend failed. UI error: Locator.click: Timeout 30000ms exceeded.
E           Call log:
E             - waiting for get_by_test_id("upload-submit")
E               - locator resolved to &lt;button type="submit" data-testid="upload-submit"&gt;Upload&lt;/button&gt;
E             - attempting click action
E               - waiting for element to be visible, enabled and stable
E               - element is visible, enabled and stable
E               - scrolling into view if needed
E               - done scrolling
E               - performing click action
E               - click action done
E               - waiting for scheduled navigations to finish
E           ; Backend error: timed out

tests/test_playwright_upload.py:154: AssertionError</failure></testcase></testsuite></testsuites>