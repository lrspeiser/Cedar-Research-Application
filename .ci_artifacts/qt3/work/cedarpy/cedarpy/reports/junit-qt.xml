<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="14.424" timestamp="2025-09-20T07:11:29.738774+00:00" hostname="iad20-fj917-ec07f8dc-6adc-42ad-a6cc-70bf83e5c256-5632FDE8ACC4.local"><testcase classname="tests.test_embedded_qt_ui" name="test_embedded_qt_upload_flow" time="13.463"><failure message="httpx.ReadTimeout: timed out">@contextlib.contextmanager
    def map_httpcore_exceptions() -&gt; typing.Iterator[None]:
        global HTTPCORE_EXC_MAP
        if len(HTTPCORE_EXC_MAP) == 0:
            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()
        try:
&gt;           yield

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpx/_transports/default.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpx/_transports/default.py:250: in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpcore/_sync/connection_pool.py:256: in handle_request
    raise exc from None
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpcore/_sync/connection_pool.py:236: in handle_request
    response = connection.handle_request(
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpcore/_sync/connection.py:103: in handle_request
    return self._connection.handle_request(request)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpcore/_sync/http11.py:136: in handle_request
    raise exc
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpcore/_sync/http11.py:106: in handle_request
    ) = self._receive_response_headers(**kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpcore/_sync/http11.py:177: in _receive_response_headers
    event = self._receive_event(timeout=timeout)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpcore/_sync/http11.py:217: in _receive_event
    data = self._network_stream.read(
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpcore/_backends/sync.py:126: in read
    with map_exceptions(exc_map):
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:158: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

map = {&lt;class 'TimeoutError'&gt;: &lt;class 'httpcore.ReadTimeout'&gt;, &lt;class 'OSError'&gt;: &lt;class 'httpcore.ReadError'&gt;}

    @contextlib.contextmanager
    def map_exceptions(map: ExceptionMapping) -&gt; typing.Iterator[None]:
        try:
            yield
        except Exception as exc:  # noqa: PIE786
            for from_exc, to_exc in map.items():
                if isinstance(exc, from_exc):
&gt;                   raise to_exc(exc) from exc
E                   httpcore.ReadTimeout: timed out

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpcore/_exceptions.py:14: ReadTimeout

The above exception was the direct cause of the following exception:

tmp_path = PosixPath('/private/var/folders/q0/wmf37v850txck86cpnvwm_zw0000gn/T/pytest-of-runner/pytest-0/test_embedded_qt_upload_flow0')

    @pytest.mark.e2e
    @pytest.mark.timeout(120)
    # Run on macOS runners (embedded Qt available). Skip on non-macOS.
    @pytest.mark.skipif(sys.platform != "darwin", reason="Embedded Qt UI test runs on macOS only")
    def test_embedded_qt_upload_flow(tmp_path: Path):
        # Launch the embedded Chromium (QtWebEngine) app and connect via CDP
        app_port = _free_port()
        devtools_port = _free_port()
    
        env = os.environ.copy()
        env.setdefault("CEDARPY_HOST", "127.0.0.1")
        env["CEDARPY_PORT"] = str(app_port)
        env["CEDARPY_OPEN_BROWSER"] = "0"
        env["CEDARPY_QT_DEVTOOLS_PORT"] = str(devtools_port)
        # Honor an existing CEDARPY_QT_HEADLESS to allow headful runs when requested
        env["CEDARPY_QT_HEADLESS"] = os.getenv("CEDARPY_QT_HEADLESS", "1")
        env["CEDARPY_ALLOW_MULTI"] = "1"   # disable single-instance lock for tests
        env["CEDARPY_QT_HARNESS"] = "1"    # enable in-process UI harness
    
        # Prepare a temp file and pass it to the harness so chooseFiles() returns it
        tmp_file = tmp_path / ".qt_embedded_upload.txt"
        tmp_file.write_text("hello from embedded qt\n", encoding="utf-8")
        env["CEDARPY_QT_TEST_FILE"] = str(tmp_file)
    
        # Start the Qt shell (embedded Chromium)
        proc = subprocess.Popen(
            ["python", "cedarqt.py"],
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
        )
    
        try:
            # Wait for server to be ready
            base = f"http://127.0.0.1:{app_port}"
            deadline = time.time() + 30
            server_ready = False
            while time.time() &lt; deadline:
                try:
                    r = httpx.get(base + "/", timeout=1.0)
                    if r.status_code &lt; 500:
                        server_ready = True
                        break
                except Exception:
                    time.sleep(0.2)
            assert server_ready, "Embedded server did not start"
    
            # Create a project and upload via HTTP (robust against file chooser restrictions in headless Qt)
            # 1) Create project
            r = httpx.post(base + "/projects/create", data={"title": "Qt Embedded"}, timeout=5.0, follow_redirects=False)
            assert r.status_code in (200, 303)
            # 2) Resolve project id from home
            home = httpx.get(base + "/", timeout=5.0).text
            import re
            m = re.search(r"/project/(\d+)", home)
            assert m, "could not find project link on home"
            pid = int(m.group(1))
            # 3) Upload file via backend to the Main branch
            with open(tmp_file, "rb") as fh:
                files = {"file": (tmp_file.name, fh, "text/plain")}
&gt;               ur = httpx.post(base + f"/project/{pid}/files/upload?branch_id=1", files=files, timeout=10.0)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_embedded_qt_ui.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpx/_api.py:304: in post
    return request(
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpx/_api.py:109: in request
    return client.request(
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpx/_client.py:825: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpx/_client.py:914: in send
    response = self._send_handling_auth(
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpx/_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpx/_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpx/_client.py:1014: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpx/_transports/default.py:249: in handle_request
    with map_httpcore_exceptions():
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py:158: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -&gt; typing.Iterator[None]:
        global HTTPCORE_EXC_MAP
        if len(HTTPCORE_EXC_MAP) == 0:
            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
&gt;           raise mapped_exc(message) from exc
E           httpx.ReadTimeout: timed out

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/httpx/_transports/default.py:118: ReadTimeout</failure></testcase></testsuite></testsuites>